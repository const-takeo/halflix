{"version":3,"sources":["assets/no-poster-available.jpg","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","Loader","role","aria-label","Text","props","color","Message","text","Image","bgURL","Rating","ImageContainer","Year","Poster","id","imageURL","rating","year","isMovie","to","require","repeat","Math","floor","length","substring","HomePresenter","nowPlaying","upComing","popular","error","loading","Helmet","map","movie","key","poster_path","vote_average","release_date","api","axios","create","baseURL","params","moviesApi","get","append_to_response","include_image_language","region","term","query","tvApi","HomeContainer","useState","setNowPlaying","setUpComing","setPopular","setError","setLoading","useEffect","a","data","results","fetchDate","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","show","name","first_air_date","SearchContainer","setMovieResults","setTvResults","setSearchTerm","searchByTerm","e","preventDefault","target","TVPresenter","topRated","airingToday","TVContainer","setTopRated","setAiringToday","fetchData","Sheader","header","Item","li","current","Slink","Link","List","ul","withRouter","pathname","location","BackDrop","bgImg","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","String","replace","runtime","episode_run_time","genres","genre","index","overview","DetailContainer","setResult","useParams","parsedId","parseInt","history","useHistory","includes","isNaN","push","AppRouter","exact","path","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d261c76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-poster-available.e7d69c9b.jpg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom:50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size:16px;\n    font-weight:600;\n`;\n\nconst Grid = styled.div`\n    margin-top:25px;\n    display:grid;\n    grid-template-columns:repeat(auto-fill, 125px);\n    grid-gap: 25px;\n`;\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\n\nexport default Section;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    font-size: 40px;\n    margin-top: 100px;\n`;\n\nconst Loader = () => (\n    <Container>\n        <span role=\"img\" aria-label=\"Loading\">⏳</span>\n        <span>Loading...</span>\n    </Container>\n);\n\nexport default Loader;","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    font-size: 24px;\n    color: ${props => props.color};\n`;\n\nconst Message = ({text, color}) => (\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>\n);\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n}\nexport default Message;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n    font-size: 12px;\n`;\n\nconst Image = styled.div`\n    background-image: url(${props => props.bgURL});\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.2s linear;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    bottom: 3px;\n    right: 3px;\n    opacity: 0;\n    transition: opacity 0.2s linear;\n`;\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n    position: relative;\n    &:hover {\n        ${Image} {\n            opacity: 0.4;\n        }\n        ${Rating} {\n            opacity: 0.8;\n        }\n    }\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({id, imageURL, title, rating, year, isMovie = false}) => (\n    <Link to={isMovie ? `movie/${id}` : `show/${id}`}>\n        <Container>\n            <ImageContainer>\n                <Image bgURL={imageURL ? `https://image.tmdb.org/t/p/w300${imageURL}` : require(\"../assets/no-poster-available.jpg\")} />\n                <Rating>\n                    <span role=\"img\" aria-label=\"rating\">{\"⭐️\".repeat(Math.floor(rating*0.5))}</span>\n                    {\" \"}{Math.floor(rating*0.5)}/5\n                </Rating>\n            </ImageContainer>\n            <Title>{title.length > 18 ? `${title.substring(0, 18)}...` : title}</Title>\n            <Year>{year}</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageURL: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool\n}\n\nexport default Poster;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Section from \"Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\nimport Helmet from \"react-helmet\";\n\n\nconst Container = styled.div`\n    padding: 20px\n`;\n\nconst HomePresenter = ({\n    nowPlaying,\n    upComing,\n    popular,\n    error,\n    loading\n}) => (\n    <>\n        <Helmet>\n            <title>Movies | HALFLIX</title>\n        </Helmet>\n        {loading ? <Loader/> : (\n        <Container>\n            {nowPlaying && nowPlaying.length > 0 && (\n                <Section title=\"Now Playing\">\n                    {nowPlaying.map(movie => (\n                        <Poster \n                            key={movie.id} \n                            id={movie.id} \n                            isMovie={true} \n                            title={movie.title} \n                            imageURL={movie.poster_path} \n                            rating={movie.vote_average} \n                            year={movie.release_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {popular && popular.length > 0 && (\n                <Section title=\"Popular Movies\">\n                    {popular.map(movie => (\n                        <Poster \n                            key={movie.id} \n                            id={movie.id} \n                            isMovie={true} \n                            title={movie.title} \n                            imageURL={movie.poster_path} \n                            rating={movie.vote_average}\n                            year={movie.release_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {upComing && upComing.length > 0 && (\n                <Section title=\"Upcoming Movies\">\n                    {upComing.map(movie => (\n                        <Poster \n                            key={movie.id} \n                            id={movie.id} \n                            isMovie={true} \n                            title={movie.title} \n                            imageURL={movie.poster_path} \n                            rating={movie.vote_average} \n                            year={movie.release_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {error && <Message color=\"#d63031\" text={error} />}\n        </Container>\n        )}\n    </>\n);\n\nHomePresenter.propTypes = {\n    nowPlaying: PropTypes.array,\n    upComing: PropTypes.array,\n    popular: PropTypes.array,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired\n}\n\nexport default HomePresenter;","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params:{\n        \"api_key\":\"d4ccd4f00c0a2c7c876bd4a32e58cf76\",\n        \"language\":\"en-US\",\n        \"timezone\":\"Asia/Tokyo\"\n    }\n});\n\nexport const moviesApi = {\n    nowPlaying: () => api.get(\"movie/now_playing\", {\n        params: {\n            \"region\":\"JP\",\n            append_to_response: \"images\",\n            include_image_language: \"JP\"\n        }\n    }),\n    upComing: () => api.get(\"movie/upcoming\", {\n        params: {\n            region:\"JP\"\n        }\n    }),\n    popular: () => api.get(\"movie/popular\", {\n        params:{\n            append_to_response: \"images\",\n            include_image_language: \"jp\",\n        }\n    }),\n    movieDetail: (id) => api.get(`movie/${id}`, {\n        params:{\n            region:\"JP\",\n            append_to_response: \"videos\",\n        }\n    }),\n    search: (term) => api.get(\"search/movie\", {\n        params:{\n            query: term,\n            region: \"JP\"\n        }\n    })\n}\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) => api.get(`tv/${id}`, {\n        params:{\n            append_to_response: \"videos\"\n        }\n    }),\n    search: (term) => api.get(\"search/tv\", {\n        params:{\n            query: term,\n            region: \"JP\"\n        }\n    })\n}","import HomeContainer from \"./HomeContainer.js\";\n\nexport default HomeContainer;","import React, { useEffect, useState } from \"react\";\nimport HomePresenter from \"./HomePresenter\";\nimport {moviesApi} from \"../../api\";\n\nconst HomeContainer = () => {\n    // state = {\n    //     nowPlaying: null,\n    //     upComing: null,\n    //     popular: null\n    // }\n    const [nowPlaying, setNowPlaying] = useState(null);\n    const [upComing, setUpComing] = useState(null);\n    const [popular, setPopular] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n    useEffect(() => {\n        const fetchDate = async () => {\n            try {\n                const {data:{results: nowPlaying}} = await moviesApi.nowPlaying();\n                const {data:{results: upComing}} = await moviesApi.upComing();\n                const {data:{results: popular}} = await moviesApi.popular();\n                setNowPlaying(nowPlaying);\n                setUpComing(upComing);\n                setPopular(popular);\n            } catch (error) {\n                setError(\"映画を見つかりませんでした。\");\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchDate();\n    },[]);\n    return (\n        <HomePresenter \n            nowPlaying={nowPlaying} \n            upComing={upComing} \n            popular={popular}\n            error={error}\n            loading={loading} \n        />\n    );\n};\nexport default HomeContainer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loader from \"../../Components/Loader\";\nimport Section from \"../../Components/Section\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\nimport Helmet from \"react-helmet\";\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst Form = styled.form`\n    margin-bottom:50px;\n    width: 100%;\n`;\n\nconst Input = styled.input`\n    all:unset;\n    font-size:28px;\n    width: 100%;\n`;\n\n\n\nconst SearchPresenter = ({\n    error,\n    loading,\n    movieResults,\n    tvResults,\n    searchTerm,\n    handleSubmit,\n    updateTerm\n}) => (\n    <Container>\n        <Helmet>\n            <title>Search | HALFLIX</title>\n        </Helmet>\n        <Form onSubmit={handleSubmit}>\n            <Input placeholder=\"What are u looking for ?\" value={searchTerm} onChange={updateTerm}/>\n        </Form>\n        {loading ? <Loader/> : \n            (\n                <>\n                    {\n                        movieResults && \n                        movieResults.length > 0 && \n                        (<Section title=\"Movie Results\">\n                            {movieResults.map(\n                            movie => (\n                                <Poster \n                                    key={movie.id} \n                                    id={movie.id} \n                                    isMovie={true} \n                                    title={movie.title} \n                                    imageURL={movie.poster_path} \n                                    rating={movie.vote_average}\n                                    year={movie.release_date.substring(0,4)}\n                                />\n                            ))}\n                        </Section>)\n                    }\n                    {\n                        tvResults && \n                        tvResults.length > 0 && \n                        (<Section title=\"TV Results\">\n                            {tvResults.map(\n                            show => (\n                                <Poster\n                                    key={show.id} \n                                    id={show.id} \n                                    isMovie={false} \n                                    title={show.name} \n                                    imageURL={show.poster_path} \n                                    rating={show.vote_average}\n                                    year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                />\n                            ))}\n                        </Section>)\n                    }\n                    {error && <Message color=\"#d63031\" text={error} />}\n                    {movieResults && \n                        tvResults && \n                        movieResults.length === 0 && \n                        tvResults.length === 0 && \n                        <Message text={`${searchTerm}の検索結果がございませんでした。`} color=\"#a5b1c2\" />}\n                </>\n            )}\n    </Container>);\n\nSearchPresenter.propTypes = {\n    movieResults: PropTypes.array,\n    tvResults: PropTypes.array,\n    searchTerm: PropTypes.string,\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updateTerm: PropTypes.func.isRequired\n}\n\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer.js\";\n\nexport default SearchContainer;","import React, { useEffect, useState } from \"react\";\nimport { moviesApi, tvApi } from \"../../api\";\nimport SearchPresenter from \"./SearchPresenter\";\n\nconst SearchContainer = () => {\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [movieResults, setMovieResults] = useState(null);\n    const [tvResults, setTvResults] = useState(null);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (searchTerm !== \"\") {\n            searchByTerm();\n        }\n    }\n    const searchByTerm = async () => {\n        try {\n            setLoading(true);\n            const {data:{results : tvResults}} = await tvApi.search(searchTerm);\n            const {data:{results : movieResults}} = await moviesApi.search(searchTerm);\n            setTvResults(tvResults);\n            setMovieResults(movieResults);\n        } catch (error) {\n            setError(`${searchTerm}の検索結果がございませんでした。`);\n        } finally {\n            setLoading(false); \n        }\n    }\n\n    const updateTerm = (e) => {\n        const {target:{value}} = e;\n        setSearchTerm(value);\n    };\n\n    return (\n        <SearchPresenter \n            error={error}\n            loading={loading}\n            movieResults={movieResults}\n            tvResults={tvResults}\n            searchTerm={searchTerm}\n            handleSubmit={handleSubmit}\n            updateTerm={updateTerm}\n            />\n    );\n};\nexport default SearchContainer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\nimport Helmet from \"react-helmet\";\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst TVPresenter = ({\n    topRated,\n    popular,\n    airingToday,\n    error,\n    loading}) => (\n        <>\n            <Helmet>\n                <title>TV Shows | HALFLIX</title>\n            </Helmet>\n             {loading ? <Loader/> : \n                <Container>\n                    {topRated && topRated.length > 0 && \n                    <Section title=\"Top Rated Shows\">\n                        {topRated.map(show => (\n                                <Poster\n                                    key={show.id} \n                                    id={show.id} \n                                    isMovie={false} \n                                    title={show.name} \n                                    imageURL={show.poster_path} \n                                    rating={show.vote_average} \n                                    year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                />\n\n                        ))}\n                    </Section>}\n                    {popular && popular.length > 0 && \n                    <Section title=\"Popular\">\n                        {popular.map(show => (\n                                <Poster \n                                    key={show.id} \n                                    id={show.id} \n                                    isMovie={false} \n                                    title={show.name} \n                                    imageURL={show.poster_path} \n                                    rating={show.vote_average}\n                                    year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                />\n\n                        ))}\n                    </Section>}\n                    {airingToday && airingToday.length > 0 && \n                    <Section title=\"Airing Today\">\n                        {airingToday.map(show => (\n                                <Poster \n                                    key={show.id} \n                                    id={show.id} \n                                    isMovie={false} \n                                    title={show.name} \n                                    imageURL={show.poster_path} \n                                    rating={show.vote_average} \n                                    year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                />\n\n                        ))}\n                    </Section>}\n                    {error && <Message color=\"#d63031\" text={error} />}\n                </Container>};\n        </>\n    )\n\nTVPresenter.propTypes = {\n    topRated: PropTypes.array,\n    popular: PropTypes.array,\n    airingToday: PropTypes.array,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired\n}\n\nexport default TVPresenter;","import TVContainer from \"./TVContainer.js\";\n\nexport default TVContainer","import React, { useEffect, useState } from \"react\";\nimport TVPresenter from \"./TVPresenter\";\nimport { tvApi } from \"../../api\";\n\nconst TVContainer = () => {\n    const [topRated, setTopRated] = useState(null);\n    const [popular, setPopular] = useState(null);\n    const [airingToday, setAiringToday] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading,setLoading] = useState(true);\n    useEffect(()=>{\n        const fetchData = async () => {\n            try {\n                const {data:{results:topRated}} = await tvApi.topRated();\n                const {data:{results:popular}} = await tvApi.popular();\n                const {data:{results:airingToday}} = await tvApi.airingToday();\n                setTopRated(topRated);\n                setPopular(popular);\n                setAiringToday(airingToday);\n            } catch (error) {\n                setError(\"番組を見つかりませんでした。\")\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchData();\n    },[]);\n    return (\n        <TVPresenter \n            topRated={topRated}\n            popular={popular}\n            airingToday={airingToday}\n            error={error}\n            loading={loading}\n            />\n    );\n};\nexport default TVContainer;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link, withRouter } from \"react-router-dom\";\n\n\nconst Sheader = styled.header`\n    color: whitesmoke;\n    position:fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    background-color:rgba(20,20,20,0.8);\n    z-index:10;\n    box-shadow:0px 1px 5px 2px rgba(0,0,0,0.8);\n`;\nconst Item = styled.li`\n    height:50px;\n    width: 70px;\n    text-align:center;\n    border-bottom: 5px solid ${props => (props.current ? \"#6c5ce7\" : \"transparent\")}; \n    transition: border-bottom 0.3s ease-in-out;\n`;\nconst Slink = styled(Link)`\n    height:50px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n`;\nconst List = styled.ul`\n    display: flex;\n    padding-left:10px;\n`;\n\nconst Header = (props) => {\n    const {location:{pathname}} = props;\n    return (\n        <Sheader>\n            <List>\n                <Item current={pathname === \"/\"}><Slink to=\"/\">ムービ</Slink></Item>\n                <Item current={pathname === \"/tv\"}><Slink to=\"/tv\">テレビ</Slink></Item>\n                <Item current={pathname === \"/search\"}><Slink to=\"/search\">検索</Slink></Item>\n            </List>\n        </Sheader>\n    );\n}\nexport default withRouter(Header);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loader from \"../../Components/Loader\";\nimport { Helmet } from \"react-helmet\";\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position: relative;\n    padding: 50px;\n`;\n\nconst BackDrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${props => props.bgImg});\n    background-size: cover;\n    background-position: center center;\n    filter:blur(3px);\n    opacity:0.5;\n`;\n\nconst Content = styled.div`\n    display:flex;\n    width: 100%;\n    height: 100%;\n    position:relative;\n    z-index: 1;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    height: 100%;\n    background-image: url(${props => props.bgImg});\n    background-position: center center;\n    background-size: cover;\n    border-radius:5px;\n`;\n\nconst Data = styled.div`\n    width:70%;\n    margin-left:10px;\n    border-radius:5px;\n`;\n\nconst Title = styled.h3`\n    font-size: 32px;\n    margin-bottom: 10px;\n`;\n\nconst ItemContainer = styled.div`\n    margin: 10px 0px 20px;\n`;\n\nconst Item = styled.span``;\n\nconst Divider = styled.span`\n    margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n    font-size:12px;\n    opacity:0.7;\n    line-height:1.5;\n    width:50%;\n`;\n\nconst DetailPresenter = ({\n    result,\n    error,\n    loading\n}) => loading ? (\n    <>\n    <Helmet>\n        <title>Loading... | HALFLIX</title>\n    </Helmet>\n    <Loader/>\n    </>\n    ) : (\n    <Container>\n        <Helmet>\n        <title>{result.title ? result.title : result.name} | HALFLIX</title>\n        </Helmet>\n        <BackDrop bgImg={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}/>\n        <Content>\n            <Cover bgImg={result.poster_path ? \n                `https://image.tmdb.org/t/p/original${result.poster_path}` : \n                require(\"../../assets/no-poster-available.jpg\")}/>\n            <Data>\n                <Title>{result.title ? result.title : result.name}</Title>\n                <ItemContainer>\n                    <Item>\n                        {result.release_date ? \n                        String(result.release_date).replace(\"-\", \".\").substring(0, 7) : \n                        String(result.first_air_date).replace(\"-\", \".\").substring(0, 7)}\n                    </Item>\n                    <Divider>❘</Divider>\n                    <Item>\n                        {result.runtime ? result.runtime : `${String(result.episode_run_time)}分`}\n                    </Item>\n                    <Divider>❘</Divider>\n                    <Item>\n                        {result.genres && \n                        result.genres.map((genre, index) => \n                        index === result.genres.length -1 ? \n                        genre.name : \n                        `${genre.name}/ `)}\n                    </Item>\n                </ItemContainer>\n                <Overview>\n                    {result.overview}\n                </Overview>\n            </Data>\n        </Content>\n    </Container>\n    );\n\nDetailPresenter.propTypes = {\n    result: PropTypes.object,\n    error: PropTypes.string,\n    loading: PropTypes.bool\n}\n\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer.js\";\n\nexport default DetailContainer;","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { moviesApi, tvApi } from \"../../api\";\nimport DetailPresenter from \"./DetailPresenter\";\n\nconst DetailContainer = () => {\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [result, setResult] = useState(null);\n    // const [isMovie, setIsMovie] = useState(false);\n    const {id} = useParams();\n    const parsedId = parseInt(id);\n    const history = useHistory();\n    const {location:{pathname}} = history;\n    const isMovie = pathname.includes(\"/movie/\");\n    useEffect(()=>{\n        if(isNaN(parsedId)) {\n            return history.push(\"/\");\n        }\n        const fetchData = async () => {\n            let results = null;\n            try {\n                if(isMovie) {\n                    ({data : results} = await moviesApi.movieDetail(parsedId));\n                } else {\n                    ({data : results} = await tvApi.showDetail(parsedId));\n                }\n            } catch (error) {\n                setError(\"探す物が見つかりませんでした。\");\n            } finally {\n                setResult(results);\n                setLoading(false);\n            }\n        }\n        fetchData();\n    },[])\n    return (\n        <DetailPresenter\n        error={error}\n        loading={loading}\n        result={result}\n        />\n        );\n};\nexport default DetailContainer;\n\n","import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport Home from \"Routes/Home\";\nimport Search from \"Routes/Search\";\nimport TV from \"Routes/TV\";\nimport Header from \"Components/Header\";\nimport Detail from \"Routes/Detail\";\n\nconst AppRouter = () => (    \n    <Router>\n        <>\n            <Header/>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home/>\n                </Route>\n                <Route exact path=\"/tv\">\n                    <TV/>\n                </Route>\n                <Route path=\"/search\">\n                    <Search/>\n                </Route>\n                <Route path=\"/movie/:id\">\n                    <Detail/>\n                </Route>\n                <Route path=\"/show/:id\">\n                    <Detail/>\n                </Route>\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        </>\n    </Router>\n);\nexport default AppRouter;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst globalStyles = createGlobalStyle`\n    ${reset}\n    a {\n        text-decoration:none;\n        color:inherit;\n    }\n    * {\n        box-sizing:border-box;\n    }\n    body {\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:14px;\n        background-color:rgba(20, 20, 20, 1);\n        color: white;\n        padding-top: 50px;\n    }\n`;\n\nexport default globalStyles; ","import React from 'react';\nimport AppRouter from './Router';\nimport GlobalStyles from \"Components/GlobalStyles\";\n\n\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles/>\n      <AppRouter/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}